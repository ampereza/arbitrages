import Web3 from 'web3';
import { Contract } from 'web3-eth-contract';
import { Token } from '../TokenFetcher';
import { FACTORY_ABI, UNISWAP_V2_POOL_ABI, ERC20_ABI } from '../constants/abis';
import { SUPPORTED_BASE_TOKENS } from '../constants/supported-tokens';

class Web3TokenFetcher {
    private web3: Web3;
    private uniswapFactory: Contract;
    private sushiswapFactory: Contract;
    private tokenCache: Map<string, Token>;
    private rateLimitDelay: number;

    constructor(providerUrl: string, factoryAddresses: { 
        UNISWAP_V2_FACTORY: string;
        SUSHISWAP_FACTORY: string;
    }) {
        console.log('Initializing Web3TokenFetcher with:', {
            providerUrl,
            factoryAddresses
        });

        this.web3 = new Web3(new Web3.providers.HttpProvider(providerUrl, {
            timeout: 30000, // 30 second timeout
            keepAlive: true,
            withCredentials: false,
            headers: [{
                name: "Accept",
                value: "application/json"
            }]
        }));

        this.uniswapFactory = new this.web3.eth.Contract(FACTORY_ABI, factoryAddresses.UNISWAP_V2_FACTORY);
        this.sushiswapFactory = new this.web3.eth.Contract(FACTORY_ABI, factoryAddresses.SUSHISWAP_FACTORY);
        this.tokenCache = new Map();
        this.rateLimitDelay = 200; // 200ms delay between requests
    }

    private async sleep(ms: number) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    private async retryWithBackoff<T>(
        operation: () => Promise<T>, 
        maxRetries: number = 3,
        initialDelay: number = 1000
    ): Promise<T> {
        let lastError: any;
        let delay = initialDelay;

        for (let i = 0; i < maxRetries; i++) {
            try {
                return await operation();
            } catch (error: any) {
                lastError = error;
                
                if (error.message.includes('CONNECTION ERROR') || 
                    error.message.includes('timeout') || 
                    error.message.includes('rate limit')) {
                    console.log(`Retry ${i + 1}/${maxRetries} failed, waiting ${delay}ms before next attempt`);
                    await this.sleep(delay);
                    delay *= 2; // Exponential backoff
                } else {
                    throw error; // Re-throw if it's not a retryable error
                }
            }
        }
        
        throw lastError;
    }

    private async getTokenInfo(address: string): Promise<Token> {
        try {
            if (this.tokenCache.has(address)) {
                return this.tokenCache.get(address)!;
            }

            console.log(`Fetching token info for: ${address}`);
            await this.sleep(this.rateLimitDelay);

            const tokenContract = new this.web3.eth.Contract(ERC20_ABI, address);
            const [symbol, decimals, name] = await Promise.all([
                this.retryWithBackoff(() => tokenContract.methods.symbol().call()),
                this.retryWithBackoff(() => tokenContract.methods.decimals().call()),
                this.retryWithBackoff(() => tokenContract.methods.name().call())
            ]);

            const token: Token = {
                address,
                symbol,
                decimals: parseInt(decimals),
                name,
                hasAaveSupport: SUPPORTED_BASE_TOKENS.some(t => t.address.toLowerCase() === address.toLowerCase())
            };

            console.log(`Found token:`, token);
            this.tokenCache.set(address, token);
            return token;
        } catch (error) {
            console.error(`Error getting token info for ${address}:`, error);
            throw error;
        }
    }

    private async getPairInfo(pairAddress: string) {
        try {
            console.log(`Getting pair info for: ${pairAddress}`);
            await this.sleep(this.rateLimitDelay);

            const pairContract = new this.web3.eth.Contract(UNISWAP_V2_POOL_ABI, pairAddress);
            const [token0Address, token1Address] = await Promise.all([
                this.retryWithBackoff(() => pairContract.methods.token0().call()),
                this.retryWithBackoff(() => pairContract.methods.token1().call())
            ]);

            console.log(`Found tokens: ${token0Address}, ${token1Address}`);
            const [token0, token1] = await Promise.all([
                this.getTokenInfo(token0Address),
                this.getTokenInfo(token1Address)
            ]);

            return { token0, token1, pairAddress };
        } catch (error) {
            console.error(`Error getting pair info for ${pairAddress}:`, error);
            throw error;
        }
    }

    public async getAllPairs(): Promise<Array<{baseToken: Token, quoteToken: Token}>> {
        const pairs: Array<{baseToken: Token, quoteToken: Token}> = [];
        
        try {
            // Get pairs from UniswapV2
            const uniswapPairs = await this.getPairsFromFactory(this.uniswapFactory, 'Uniswap');
            console.log(`Found ${uniswapPairs.length} Uniswap pairs`);
            pairs.push(...uniswapPairs);
            
            await this.sleep(2000); // Wait 2 seconds before querying next DEX
            
            // Get pairs from Sushiswap
            const sushiswapPairs = await this.getPairsFromFactory(this.sushiswapFactory, 'Sushiswap');
            console.log(`Found ${sushiswapPairs.length} Sushiswap pairs`);
            pairs.push(...sushiswapPairs);
            
            console.log(`Total pairs found: ${pairs.length}`);
            return pairs;
            
        } catch (error) {
            console.error('Error fetching pairs:', error);
            return [];
        }
    }

    private async getPairsFromFactory(
        factoryContract: Contract, 
        factoryName: string,
        batchSize: number = 10
    ): Promise<Array<{baseToken: Token, quoteToken: Token}>> {
        try {
            console.log(`Getting pairs from ${factoryName}...`);
            await this.sleep(this.rateLimitDelay);

            const pairCount = parseInt(await this.retryWithBackoff(() => 
                factoryContract.methods.allPairsLength().call()
            ));
            
            console.log(`${factoryName}: Found ${pairCount} pairs in factory`);
            const pairs: Array<{baseToken: Token, quoteToken: Token}> = [];
            
            // Process in smaller batches and limit total pairs to avoid overload
            const maxPairs = Math.min(pairCount, 100); // Limit to first 100 pairs for now
            for (let i = 0; i < maxPairs; i += batchSize) {
                try {
                    console.log(`${factoryName}: Processing batch ${i}-${i+batchSize}/${maxPairs}`);
                    const pairPromises = [];
                    
                    for (let j = i; j < Math.min(i + batchSize, maxPairs); j++) {
                        await this.sleep(this.rateLimitDelay);
                        pairPromises.push(
                            this.retryWithBackoff(() => factoryContract.methods.allPairs(j).call())
                        );
                    }
                    
                    const pairAddresses = await Promise.all(pairPromises);
                    console.log(`${factoryName}: Got ${pairAddresses.length} pair addresses`);
                    
                    // Process pairs sequentially to avoid rate limits
                    for (const addr of pairAddresses) {
                        try {
                            await this.sleep(this.rateLimitDelay);
                            const pairInfo = await this.getPairInfo(addr);
                            if (!pairInfo) continue;

                            const { token0, token1 } = pairInfo;
                            // Ensure at least one token is supported by Aave
                            if (token0.hasAaveSupport || token1.hasAaveSupport) {
                                pairs.push({
                                    baseToken: token0.hasAaveSupport ? token0 : token1,
                                    quoteToken: token0.hasAaveSupport ? token1 : token0
                                });
                                console.log(`${factoryName}: Added pair ${token0.symbol}/${token1.symbol}`);
                            }
                        } catch (error) {
                            console.error(`${factoryName}: Error processing pair ${addr}:`, error);
                            continue;
                        }
                    }

                    await this.sleep(1000); // Wait 1 second between batches
                } catch (error) {
                    console.error(`${factoryName}: Error processing batch ${i}:`, error);
                    continue;
                }
            }
            
            console.log(`${factoryName}: Found ${pairs.length} valid trading pairs`);
            return pairs;
        } catch (error) {
            console.error(`${factoryName}: Error getting pairs from factory:`, error);
            return [];
        }
    }
}

export { Web3TokenFetcher };
